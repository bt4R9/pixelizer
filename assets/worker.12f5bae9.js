var R=Object.defineProperty;var M=(n,c,o)=>c in n?R(n,c,{enumerable:!0,configurable:!0,writable:!0,value:o}):n[c]=o;var e=(n,c,o)=>(M(n,typeof c!="symbol"?c+"":c,o),o);(function(){"use strict";class n{constructor(t){e(this,"y");e(this,"x");e(this,"color");e(this,"size");const{r:i,g:s,b:h,a,size:r}=t;this.y=t.y,this.x=t.x,this.color=`rgba(${i}, ${s}, ${h}, ${a})`,this.size=r}}class c{constructor(t){e(this,"pixels");e(this,"width");e(this,"height");const{pixels:i,width:s,height:h}=t;this.pixels=i,this.width=s,this.height=h}average(t,i,s){let h=0,a=0,r=0,g=0,d=0;for(let f=t;t<Math.min(this.height,t+s);t++)for(let w=i;i<Math.min(this.width,i+s);i++){d+=1;const p=(f*this.width+w)*4,z=this.pixels[p],S=this.pixels[p+1],v=this.pixels[p+2],y=this.pixels[p+3];h+=z,a+=S,r+=v,g+=y}return h=h/d|0,a=a/d|0,r=r/d|0,g=g/d/255,{r:h,g:a,b:r,a:g}}pixelize(t){const{pixelSize:i,ratio:s}=t,h=[];for(let a=0;a<this.height;a+=i)for(let r=0;r<this.width;r+=i){const{r:g,g:d,b:f,a:w}=this.average(a,r,i);if(w!==0){const p=Math.ceil(Math.floor(a*s)/i)*i,z=Math.ceil(Math.floor(r*s)/i)*i;h.push(new n({y:p,x:z,r:g,g:d,b:f,a:w,size:i}))}}return h}}class o{constructor(t){e(this,"canvas");e(this,"context");e(this,"particles",[]);e(this,"ratio",1);e(this,"pixelSize",4);e(this,"width",0);e(this,"height",0);this.canvas=t,this.context=this.canvas.getContext("2d")}draw(){this.canvas.width=Math.ceil(this.width*this.ratio),this.canvas.height=Math.ceil(this.height*this.ratio),this.context.clearRect(0,0,this.canvas.width,this.canvas.height);for(const t of this.particles){const{y:i,x:s,color:h}=t;this.context.fillStyle=h,this.context.fillRect(s,i,this.pixelSize,this.pixelSize)}}clear(){this.context.clearRect(0,0,this.canvas.width,this.canvas.height)}}class m{constructor(t){e(this,"canvas");e(this,"context");this.canvas=t,this.context=t.getContext("2d")}async load(t){const i=await self.createImageBitmap(t);return this.canvas.width=i.width,this.canvas.height=i.height,this.context.clearRect(0,0,i.width,i.height),this.context.drawImage(i,0,0),{pixels:this.context.getImageData(0,0,i.width,i.height).data,width:i.width,height:i.height}}}class u{constructor(){e(this,"canvas",null);e(this,"helper",null);e(this,"renderer",null);e(this,"imageLoader",null);e(this,"pixels",null);e(this,"width",0);e(this,"height",0);e(this,"pixelSize",4);e(this,"imageRatio",1)}init({canvas:t,helper:i}){this.canvas=t,this.helper=i,this.canvas.height=480,this.renderer=new o(this.canvas),this.imageLoader=new m(this.helper)}async loadImage(t){self.postMessage({type:"processingStart"});const{pixels:i,width:s,height:h}=await this.imageLoader.load(t);this.pixels=i,this.width=s,this.height=h,this.draw(!1)}setPixelSize(t){this.pixelSize=t,this.draw()}setImageRatio(t){this.imageRatio=t,this.draw()}draw(t=!0){t&&self.postMessage({type:"processingStart"});const s=new c({pixels:this.pixels,width:this.width,height:this.height}).pixelize({pixelSize:this.pixelSize,ratio:this.imageRatio});this.renderer.particles=s,this.renderer.width=this.width,this.renderer.height=this.height,this.renderer.pixelSize=this.pixelSize,this.renderer.ratio=this.imageRatio,this.renderer.draw(),self.postMessage({type:"processingEnd"})}clear(){this.renderer.clear()}}const x=new u;self.addEventListener("message",l=>{const t=l.data.type;t==="initialize"&&x.init(l.data),t==="loadImage"&&x.loadImage(l.data.file),t==="setImageRatio"&&x.setImageRatio(l.data.ratio),t==="setPixelSize"&&x.setPixelSize(l.data.size),t==="clear"&&x.clear()})})();
